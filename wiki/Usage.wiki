#summary Usage guidelines.

= Introduction =

This page explains how to use the API provided by this package.

= Hook =
In order to use *php-aop*, there are two simple steps to follow:
* include the *php-aop* script once in the entry point file of the project
* register the project's class path

== Project Entry Point ==
The *php-aop* script must be included once (actually, one can include the script multiple times without any problems albeit performance degradation) at the entry point of the project:
{{{
 require_once "aop/aop.php";
}}}
== Class Path ==
*php-aop* relies on PHP's SPL autoloading functionality. In order to weave the _advices_ in the class code, each class in the project must be registered with *php-aop*:
{{{
 aop::register('put-classpath-information-here');
}}}
The above line should be put in the entry point script just below the *require_once "aop/aop.php";* statement.

===Examples===
 1- The project's class path is located relative to the entry point script in _classes_ :
 {{{
  aop::register( dirname(__FILE__) . '/classes' );
 }}}

 2- The project's class path is located in the PEAR path in 'project_X/classes' :
 {{{
  aop::register( 'project_X/classes' );
 }}}

= Class Hierarchy =
For *php-aop* to work, all classes must be loaded through the *php-aop* framework; thus, no *include* or *require* statements must be used, doing so would bypass *php-aop*.

Furthermore, the class hierarchy must either:
 #be laid out ... in the filesystem
 #be defined in ... 

== Per Method ==
Joinpoints can be added on a per-method basis as illustrated below:

{{{
/**
 * Method Name
 *  Description
 *
 * @param $inputParameter Some-description
 * @return $result Some-description
 *
 * @before  class-name::method-name
 * @after
 * @around
 */
}}}